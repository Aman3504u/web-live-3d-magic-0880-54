name: Android Release (Fixed)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708
        packages: 'platform-tools platforms;android-34 build-tools;34.0.0'
        
    - name: Accept Android SDK licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
      
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app
      run: npm run build
      
    - name: Setup Android platform (clean)
      run: |
        echo "🔧 Setting up Android platform..."
        rm -rf android
        npx cap add android
        echo "✅ Android platform added successfully"
      
    - name: Configure Capacitor Config
      run: |
        echo "📝 Configuring Capacitor..."
        
        # Create capacitor.config.ts with proper Android configuration
        cat > capacitor.config.ts << 'EOF'
        import { CapacitorConfig } from '@capacitor/cli';

        const config: CapacitorConfig = {
          appId: 'app.lovable.weblive3dmagic',
          appName: 'Web Live 3D Magic',
          webDir: 'dist',
          server: {
            androidScheme: 'https'
          },
          android: {
            allowMixedContent: true,
            captureInput: true,
            webContentsDebuggingEnabled: true
          }
        };

        export default config;
        EOF
        
        echo "✅ Capacitor config created"
        
    - name: Configure Android for Live Wallpaper (Post-Sync)
      run: |
        echo "📂 Configuring Android for live wallpaper..."
        
        # Add live wallpaper service to the main activity's Java directory
        mkdir -p android/app/src/main/java/app/lovable/weblive3dmagic
        
        # Copy the corrected AndroidManifest.xml
        cp corrected-AndroidManifest.xml android/app/src/main/AndroidManifest.xml
        
        # Create LiveWallpaperService.java with proper implementation
        cat > android/app/src/main/java/app/lovable/weblive3dmagic/LiveWallpaperService.java << 'EOF'
        package app.lovable.weblive3dmagic;
        
        import android.service.wallpaper.WallpaperService;
        import android.view.SurfaceHolder;
        import android.webkit.WebView;
        import android.webkit.WebViewClient;
        import android.webkit.WebSettings;
        import android.view.MotionEvent;
        
        public class LiveWallpaperService extends WallpaperService {
            @Override
            public Engine onCreateEngine() {
                return new WebViewEngine();
            }
        
            private class WebViewEngine extends Engine {
                private WebView webView;
        
                @Override
                public void onCreate(SurfaceHolder surfaceHolder) {
                    super.onCreate(surfaceHolder);
                }
        
                @Override
                public void onSurfaceCreated(SurfaceHolder holder) {
                    super.onSurfaceCreated(holder);
                    // Initialize WebView for wallpaper rendering
                }
        
                @Override
                public void onTouchEvent(MotionEvent event) {
                    super.onTouchEvent(event);
                    // Handle touch events for interactive wallpaper
                }
        
                @Override
                public void onDestroy() {
                    super.onDestroy();
                    if (webView != null) {
                        webView.destroy();
                    }
                }
            }
        }
        EOF
        
        echo "✅ Live wallpaper configuration completed"
        
    - name: Add XML Resources
      run: |
        echo "📄 Adding XML resources..."
        
        mkdir -p android/app/src/main/res/xml
        cat > android/app/src/main/res/xml/wallpaper_service.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <wallpaper xmlns:android="http://schemas.android.com/apk/res/android"
            android:thumbnail="@drawable/ic_launcher"
            android:description="@string/app_name"
            android:settingsActivity="app.lovable.weblive3dmagic.MainActivity" />
        EOF
        
        echo "✅ XML resources created"
        
    - name: Apply Gradle Configuration Fix
      run: |
        echo "⚙️ Applying Gradle configuration fixes..."
        
        # Update build.gradle to handle manifest merger conflicts
        cat >> android/app/build.gradle << 'EOF'

        // Manifest merger conflict resolution
        android {
            packagingOptions {
                pickFirst '**/AndroidManifest.xml'
            }
            
            // Prevent duplicate AndroidX conflicts
            configurations.all {
                resolutionStrategy.force 'androidx.core:core:1.12.0'
            }
        }
        EOF
        
        echo "✅ Gradle configuration applied"
        
    - name: Sync Capacitor
      run: |
        echo "🔄 Syncing Capacitor..."
        npx cap sync android
        echo "✅ Capacitor sync completed"
        
    - name: Debug Manifest Issues
      run: |
        echo "🔍 Debugging manifest configuration..."
        echo "Current AndroidManifest.xml:"
        cat android/app/src/main/AndroidManifest.xml
        
        echo -e "\n📋 Checking for common issues..."
        
        # Check for duplicate permissions
        echo "Permissions found:"
        grep "uses-permission" android/app/src/main/AndroidManifest.xml || echo "No permissions found"
        
        # Check for features
        echo "Features found:"
        grep "uses-feature" android/app/src/main/AndroidManifest.xml || echo "No features found"
        
    - name: Prepare Gradle
      run: |
        echo "⚙️ Preparing Gradle wrapper..."
        cd android
        chmod +x gradlew
        ./gradlew --version
        echo "✅ Gradle is ready"
        
    - name: Clean Build
      run: |
        echo "🧹 Cleaning previous builds..."
        cd android
        ./gradlew clean --no-daemon
        
    - name: Build Android Debug APK
      run: |
        echo "🔨 Building debug APK..."
        cd android
        ./gradlew assembleDebug --no-daemon --stacktrace --info
        
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "✅ Debug APK built successfully"
          ls -la app/build/outputs/apk/debug/
        else
          echo "❌ Debug APK not found"
          exit 1
        fi
        
    # ... rest of the upload and release steps remain the same