name: Android Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708
        packages: 'platform-tools platforms;android-34 build-tools;34.0.0'
        
    - name: Accept Android SDK licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
      
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app
      run: npm run build
      
    - name: Setup Android platform
      run: |
        echo "🔧 Setting up Android platform..."
        # Remove existing android directory if it exists
        rm -rf android
        
        # Add Android platform
        npx cap add android
        echo "✅ Android platform added successfully"
      
    - name: Copy custom Android files
      run: |
        echo "📂 Copying custom Android files..."
        
        # Verify source files exist
        if [ ! -f "android/app/build.gradle" ]; then
          echo "❌ Source build.gradle not found"
          exit 1
        fi
        
        # Copy build configuration
        cp android/app/build.gradle android/app/build.gradle.backup
        cp android/app/build.gradle android/app/build.gradle
        
        # Copy variables.gradle if exists
        if [ -f "android/variables.gradle" ]; then
          cp android/variables.gradle android/variables.gradle
        fi
        
        # Copy AndroidManifest.xml
        if [ -f "android/app/src/main/AndroidManifest.xml" ]; then
          cp android/app/src/main/AndroidManifest.xml android/app/src/main/AndroidManifest.xml
        fi
        
        # Copy LiveWallpaperService.java
        if [ -f "android/LiveWallpaperService.java" ]; then
          mkdir -p android/app/src/main/java/app/lovable/web_live_3d_magic
          cp android/LiveWallpaperService.java android/app/src/main/java/app/lovable/web_live_3d_magic/
        fi
        
        # Copy wallpaper service XML
        if [ -f "android/wallpaper_service.xml" ]; then
          mkdir -p android/app/src/main/res/xml
          cp android/wallpaper_service.xml android/app/src/main/res/xml/
        fi
        
        echo "✅ Custom Android files copied successfully"
      
    - name: Sync Capacitor
      run: |
        echo "🔄 Syncing Capacitor..."
        npx cap sync android
        echo "✅ Capacitor sync completed"
      
    - name: Prepare Gradle
      run: |
        echo "⚙️ Preparing Gradle wrapper..."
        cd android
        chmod +x gradlew
        # Test Gradle wrapper
        ./gradlew --version
        echo "✅ Gradle is ready"
        
    - name: Build Android Debug APK
      run: |
        echo "🔨 Building debug APK..."
        cd android
        ./gradlew clean assembleDebug --no-daemon --stacktrace --info
        
        # Verify debug APK was created
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "✅ Debug APK built successfully"
          ls -la app/build/outputs/apk/debug/
        else
          echo "❌ Debug APK not found"
          exit 1
        fi
        
    - name: Build Android Release APK
      run: |
        echo "🔨 Building release APK..."
        cd android
        ./gradlew assembleRelease --no-daemon --stacktrace --info
        
        # Verify release APK was created
        if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          echo "✅ Release APK built successfully"
          ls -la app/build/outputs/apk/release/
        else
          echo "❌ Release APK not found"
          exit 1
        fi
        
    - name: Optimize APK (zipalign)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        echo "📱 Optimizing APK..."
        cd android/app/build/outputs/apk/release
        
        # Check if zipalign exists
        if [ -f "$ANDROID_HOME/build-tools/34.0.0/zipalign" ]; then
          $ANDROID_HOME/build-tools/34.0.0/zipalign -v -p 4 app-release-unsigned.apk app-release-aligned.apk
          echo "✅ APK optimized successfully"
        else
          echo "⚠️ zipalign not found, skipping optimization"
          cp app-release-unsigned.apk app-release-aligned.apk
        fi
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-${{ github.run_number }}
        path: android/app/build/outputs/apk/debug/app-debug.apk
        if-no-files-found: error
        
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-${{ github.run_number }}
        path: |
          android/app/build/outputs/apk/release/app-release-unsigned.apk
          android/app/build/outputs/apk/release/app-release-aligned.apk
        if-no-files-found: error
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          android/app/build/outputs/apk/debug/app-debug.apk
          android/app/build/outputs/apk/release/app-release-unsigned.apk
          android/app/build/outputs/apk/release/app-release-aligned.apk
        body: |
          ## 🚀 Web Live 3D Magic - Android Release ${{ github.ref_name }}
          
          ### 📱 What's New
          - Interactive 3D wallpapers from websites
          - Hardware-accelerated WebView rendering
          - Touch interaction support
          - Full Android compatibility
          - Optimized performance
          
          ### 📥 Installation Instructions
          1. Download the APK file below
          2. Enable "Install from unknown sources" in Android Settings > Security
          3. Install the downloaded APK file
          4. Open Settings > Wallpaper > Live Wallpapers
          5. Select "Web Live 3D Magic" and configure your wallpaper
          
          ### 📦 Available Files
          - `app-debug.apk` - Debug version with detailed logging
          - `app-release-unsigned.apk` - Standard release version
          - `app-release-aligned.apk` - Optimized release version (recommended)
          
          ### ⚙️ System Requirements
          - Android 8.0+ (API 26+)
          - OpenGL ES 3.0 support
          - 2GB+ RAM (4GB+ recommended)
          - WebView 80+ (usually auto-updated)
          
          ### 🐛 Troubleshooting
          - If installation fails, ensure "Install from unknown sources" is enabled
          - If wallpaper doesn't load, try restarting your device
          - For performance issues, close other apps running in background
          
          Built with ❤️ using Capacitor and React
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Summary
      if: always()
      run: |
        echo "📊 Build Summary:"
        echo "================="
        if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "✅ Debug APK: $(ls -lh android/app/build/outputs/apk/debug/app-debug.apk | awk '{print $5}')"
        fi
        if [ -f "android/app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          echo "✅ Release APK: $(ls -lh android/app/build/outputs/apk/release/app-release-unsigned.apk | awk '{print $5}')"
        fi
        if [ -f "android/app/build/outputs/apk/release/app-release-aligned.apk" ]; then
          echo "✅ Aligned APK: $(ls -lh android/app/build/outputs/apk/release/app-release-aligned.apk | awk '{print $5}')"
        fi
        echo "🎉 Build process completed!"