name: Android Release (Fixed)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708
        packages: 'platform-tools platforms;android-34 build-tools;34.0.0'
        
    - name: Accept Android SDK licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
      
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app
      run: npm run build
      
    - name: Setup Android platform (clean)
      run: |
        echo "üîß Setting up Android platform..."
        rm -rf android
        npx cap add android
        echo "‚úÖ Android platform added successfully"
      
    - name: Configure Android Manifest (Proper Merge)
      run: |
        echo "üìù Configuring Android manifest..."
        
        # Create backup of generated manifest
        cp android/app/src/main/AndroidManifest.xml android/app/src/main/AndroidManifest.xml.backup
        
        # Use xmlstarlet or manual editing to add custom features
        # Add live wallpaper service configuration
        sed -i '/<\/application>/i\
        \        <service\
        \            android:name=".LiveWallpaperService"\
        \            android:enabled="true"\
        \            android:icon="@drawable/ic_launcher"\
        \            android:label="Web Live 3D Magic"\
        \            android:permission="android.permission.BIND_WALLPAPER">\
        \            <intent-filter>\
        \                <action android:name="android.service.wallpaper.WallpaperService" />\
        \            </intent-filter>\
        \            <meta-data\
        \                android:name="android.service.wallpaper"\
        \                android:resource="@xml/wallpaper_service" />\
        \        </service>' android/app/src/main/AndroidManifest.xml
        
        # Add required permissions (avoiding duplicates)
        if ! grep -q "android.permission.INTERNET" android/app/src/main/AndroidManifest.xml; then
            sed -i '/<manifest/a\    <uses-permission android:name="android.permission.INTERNET" />' android/app/src/main/AndroidManifest.xml
        fi
        
        if ! grep -q "android.permission.ACCESS_NETWORK_STATE" android/app/src/main/AndroidManifest.xml; then
            sed -i '/<manifest/a\    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />' android/app/src/main/AndroidManifest.xml
        fi
        
        # Add hardware requirements (avoid conflicts)
        if ! grep -q "android.hardware.touchscreen" android/app/src/main/AndroidManifest.xml; then
            sed -i '/<manifest/a\    <uses-feature android:name="android.hardware.touchscreen" android:required="false" />' android/app/src/main/AndroidManifest.xml
        fi
        
        echo "‚úÖ Android manifest configured"
        
    - name: Add Custom Java Files
      run: |
        echo "üìÇ Adding custom Java files..."
        
        # Create LiveWallpaperService.java
        mkdir -p android/app/src/main/java/app/lovable/weblive3dmagic
        cat > android/app/src/main/java/app/lovable/weblive3dmagic/LiveWallpaperService.java << 'EOF'
        package app.lovable.weblive3dmagic;
        
        import android.service.wallpaper.WallpaperService;
        import android.view.SurfaceHolder;
        import android.webkit.WebView;
        import android.webkit.WebViewClient;
        import android.webkit.WebSettings;
        
        public class LiveWallpaperService extends WallpaperService {
            @Override
            public Engine onCreateEngine() {
                return new WebViewEngine();
            }
        
            private class WebViewEngine extends Engine {
                private WebView webView;
        
                @Override
                public void onCreate(SurfaceHolder surfaceHolder) {
                    super.onCreate(surfaceHolder);
                    webView = new WebView(getApplicationContext());
                    WebSettings webSettings = webView.getSettings();
                    webSettings.setJavaScriptEnabled(true);
                    webSettings.setDomStorageEnabled(true);
                    webSettings.setAllowFileAccess(true);
                    webSettings.setAllowContentAccess(true);
                    
                    webView.setWebViewClient(new WebViewClient());
                    webView.loadUrl("file:///android_asset/public/index.html");
                }
        
                @Override
                public void onDestroy() {
                    super.onDestroy();
                    if (webView != null) {
                        webView.destroy();
                    }
                }
            }
        }
        EOF
        
        echo "‚úÖ LiveWallpaperService.java created"
        
    - name: Add XML Resources
      run: |
        echo "üìÑ Adding XML resources..."
        
        mkdir -p android/app/src/main/res/xml
        cat > android/app/src/main/res/xml/wallpaper_service.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <wallpaper xmlns:android="http://schemas.android.com/apk/res/android"
            android:thumbnail="@drawable/ic_launcher"
            android:description="@string/app_name"
            android:settingsActivity="app.lovable.weblive3dmagic.MainActivity" />
        EOF
        
        echo "‚úÖ XML resources created"
        
    - name: Update Gradle Configuration
      run: |
        echo "‚öôÔ∏è Updating Gradle configuration..."
        
        # Update variables.gradle for better Android support
        cat > android/variables.gradle << 'EOF'
        ext {
            minSdkVersion = 26
            compileSdkVersion = 34
            targetSdkVersion = 34
            androidxActivityVersion = '1.8.0'
            androidxAppCompatVersion = '1.6.1'
            androidxCoordinatorLayoutVersion = '1.2.0'
            androidxCoreVersion = '1.12.0'
            androidxFragmentVersion = '1.6.2'
            coreSplashScreenVersion = '1.0.1'
            androidxWebkitVersion = '1.8.0'
            junitVersion = '4.13.2'
            androidxJunitVersion = '1.1.5'
            androidxEspressoCoreVersion = '3.5.1'
            cordovaAndroidVersion = '10.1.1'
        }
        EOF
        
        echo "‚úÖ Gradle configuration updated"
        
    - name: Sync Capacitor
      run: |
        echo "üîÑ Syncing Capacitor..."
        npx cap sync android --no-build
        echo "‚úÖ Capacitor sync completed"
        
    - name: Debug Manifest Issues
      run: |
        echo "üîç Debugging manifest configuration..."
        echo "Current AndroidManifest.xml:"
        cat android/app/src/main/AndroidManifest.xml
        
        echo -e "\nüìã Checking for common issues..."
        
        # Check for duplicate permissions
        echo "Permissions found:"
        grep "uses-permission" android/app/src/main/AndroidManifest.xml || echo "No permissions found"
        
        # Check for features
        echo "Features found:"
        grep "uses-feature" android/app/src/main/AndroidManifest.xml || echo "No features found"
        
    - name: Prepare Gradle
      run: |
        echo "‚öôÔ∏è Preparing Gradle wrapper..."
        cd android
        chmod +x gradlew
        ./gradlew --version
        echo "‚úÖ Gradle is ready"
        
    - name: Clean Build
      run: |
        echo "üßπ Cleaning previous builds..."
        cd android
        ./gradlew clean --no-daemon
        
    - name: Build Android Debug APK
      run: |
        echo "üî® Building debug APK..."
        cd android
        ./gradlew assembleDebug --no-daemon --stacktrace --info
        
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "‚úÖ Debug APK built successfully"
          ls -la app/build/outputs/apk/debug/
        else
          echo "‚ùå Debug APK not found"
          exit 1
        fi
        
    # ... rest of the upload and release steps remain the same