name: Android Release (Fixed)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708
        packages: 'platform-tools platforms;android-34 build-tools;34.0.0'
        
    - name: Accept Android SDK licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
      
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app
      run: npm run build
      
    - name: Setup Android platform (clean)
      run: |
        echo "üîß Setting up Android platform..."
        rm -rf android
        npx cap add android
        echo "‚úÖ Android platform added successfully"
      
    - name: Configure Capacitor Config
      run: |
        echo "üìù Configuring Capacitor..."
        
        # Create capacitor.config.ts with proper Android configuration
        cat > capacitor.config.ts << 'EOF'
        import { CapacitorConfig } from '@capacitor/cli';

        const config: CapacitorConfig = {
          appId: 'app.lovable.weblive3dmagic',
          appName: 'Web Live 3D Magic',
          webDir: 'dist',
          server: {
            androidScheme: 'https'
          },
          android: {
            allowMixedContent: true,
            captureInput: true,
            webContentsDebuggingEnabled: true
          }
        };

        export default config;
        EOF
        
        echo "‚úÖ Capacitor config created"
        
    - name: Configure Android for Live Wallpaper (Post-Sync)
      run: |
        echo "üìÇ Configuring Android for live wallpaper..."
        
        # Add live wallpaper service to the main activity's Java directory
        mkdir -p android/app/src/main/java/app/lovable/weblive3dmagic
        
        # Create the corrected AndroidManifest.xml inline
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="app.lovable.weblive3dmagic">

            <!-- Essential permissions (avoid duplicates) -->
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.BIND_WALLPAPER" />
            
            <!-- Hardware features - properly configured to avoid conflicts -->
            <!-- Camera features (set required=false to avoid compatibility issues) -->
            <uses-feature 
                android:name="android.hardware.camera" 
                android:required="false" />
            <uses-feature 
                android:name="android.hardware.camera.autofocus" 
                android:required="false" />
            
            <!-- Graphics features -->
            <uses-feature 
                android:glEsVersion="0x00030000"
                android:required="false" />
            <uses-feature 
                android:name="android.hardware.vulkan.version"
                android:version="0x00400000"
                android:required="false" />
                
            <!-- Touchscreen feature -->
            <uses-feature 
                android:name="android.hardware.touchscreen" 
                android:required="false" />

            <!-- Queries for Android 11+ (API 30+) -->
            <queries>
                <intent>
                    <action android:name="android.intent.action.VIEW" />
                    <data android:scheme="https" />
                </intent>
            </queries>

            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:roundIcon="@mipmap/ic_launcher_round"
                android:supportsRtl="true"
                android:theme="@style/AppTheme"
                android:usesCleartextTraffic="true">

                <!-- Main Activity (Capacitor default) -->
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:launchMode="singleTask"
                    android:theme="@style/AppTheme.NoActionBarLaunch">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>

                <!-- Live Wallpaper Service -->
                <service
                    android:name=".LiveWallpaperService"
                    android:enabled="true"
                    android:icon="@mipmap/ic_launcher"
                    android:label="@string/app_name"
                    android:permission="android.permission.BIND_WALLPAPER"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.service.wallpaper.WallpaperService" />
                    </intent-filter>
                    <meta-data
                        android:name="android.service.wallpaper"
                        android:resource="@xml/wallpaper_service" />
                </service>

                <!-- Provider for Capacitor -->
                <provider
                    android:name="androidx.core.content.FileProvider"
                    android:authorities="${applicationId}.fileprovider"
                    android:exported="false"
                    android:grantUriPermissions="true">
                    <meta-data
                        android:name="android.support.FILE_PROVIDER_PATHS"
                        android:resource="@xml/file_paths" />
                </provider>
            </application>
        </manifest>
        EOF
        
        # Create LiveWallpaperService.java with proper implementation
        cat > android/app/src/main/java/app/lovable/weblive3dmagic/LiveWallpaperService.java << 'EOF'
package app.lovable.weblive3dmagic;

import android.service.wallpaper.WallpaperService;
import android.view.SurfaceHolder;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.webkit.WebSettings;
import android.view.MotionEvent;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Color;

public class LiveWallpaperService extends WallpaperService {
    @Override
    public Engine onCreateEngine() {
        return new WebViewEngine();
    }

    private class WebViewEngine extends Engine {
        private Paint paint = new Paint();
        private boolean visible = true;

        @Override
        public void onCreate(SurfaceHolder surfaceHolder) {
            super.onCreate(surfaceHolder);
            paint.setColor(Color.BLUE);
            paint.setAntiAlias(true);
        }

        @Override
        public void onSurfaceCreated(SurfaceHolder holder) {
            super.onSurfaceCreated(holder);
            drawFrame();
        }

        @Override
        public void onVisibilityChanged(boolean visible) {
            this.visible = visible;
            if (visible) {
                drawFrame();
            }
        }

        @Override
        public void onTouchEvent(MotionEvent event) {
            super.onTouchEvent(event);
            drawFrame();
        }

        private void drawFrame() {
            SurfaceHolder holder = getSurfaceHolder();
            Canvas canvas = null;
            try {
                canvas = holder.lockCanvas();
                if (canvas != null) {
                    canvas.drawColor(Color.BLACK);
                    canvas.drawCircle(
                        canvas.getWidth() / 2, 
                        canvas.getHeight() / 2, 
                        100, 
                        paint
                    );
                }
            } finally {
                if (canvas != null) {
                    holder.unlockCanvasAndPost(canvas);
                }
            }
        }

        @Override
        public void onDestroy() {
            super.onDestroy();
        }
    }
}
        EOF
        
        echo "‚úÖ Live wallpaper configuration completed"
        
    - name: Add XML Resources
      run: |
        echo "üìÑ Adding XML resources..."
        
        mkdir -p android/app/src/main/res/xml
        cat > android/app/src/main/res/xml/wallpaper_service.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <wallpaper xmlns:android="http://schemas.android.com/apk/res/android"
            android:thumbnail="@drawable/ic_launcher"
            android:description="@string/app_name"
            android:settingsActivity="app.lovable.weblive3dmagic.MainActivity" />
        EOF
        
        echo "‚úÖ XML resources created"
        
    - name: Apply Gradle Configuration Fix
      run: |
        echo "‚öôÔ∏è Applying Gradle configuration fixes..."
        
        # Backup original build.gradle
        cp android/app/build.gradle android/app/build.gradle.bak
        
        # Insert proper Android configuration into build.gradle
        sed -i '/android {/a\
    packagingOptions {\
        pickFirst "**/libc++_shared.so"\
        pickFirst "**/libjsc.so"\
        exclude "META-INF/DEPENDENCIES"\
        exclude "META-INF/LICENSE"\
        exclude "META-INF/LICENSE.txt"\
        exclude "META-INF/NOTICE"\
        exclude "META-INF/NOTICE.txt"\
    }\
    \
    configurations.all {\
        resolutionStrategy.force "androidx.core:core:1.12.0"\
    }\
    \
    compileOptions {\
        sourceCompatibility JavaVersion.VERSION_1_8\
        targetCompatibility JavaVersion.VERSION_1_8\
    }' android/app/build.gradle
        
        echo "‚úÖ Gradle configuration applied"
        
    - name: Sync Capacitor
      run: |
        echo "üîÑ Syncing Capacitor..."
        npx cap sync android
        echo "‚úÖ Capacitor sync completed"
        
    - name: Debug Manifest Issues
      run: |
        echo "üîç Debugging manifest configuration..."
        echo "Current AndroidManifest.xml:"
        cat android/app/src/main/AndroidManifest.xml
        
        echo -e "\nüìã Checking for common issues..."
        
        # Check for duplicate permissions
        echo "Permissions found:"
        grep "uses-permission" android/app/src/main/AndroidManifest.xml || echo "No permissions found"
        
        # Check for features
        echo "Features found:"
        grep "uses-feature" android/app/src/main/AndroidManifest.xml || echo "No features found"
        
    - name: Prepare Gradle
      run: |
        echo "‚öôÔ∏è Preparing Gradle wrapper..."
        cd android
        chmod +x gradlew
        ./gradlew --version
        echo "‚úÖ Gradle is ready"
        
    - name: Clean Build
      run: |
        echo "üßπ Cleaning previous builds..."
        cd android
        ./gradlew clean --no-daemon
        
    - name: Build Android Debug APK
      run: |
        echo "üî® Building debug APK..."
        cd android
        
        echo "üìã Checking build.gradle configuration..."
        cat app/build.gradle
        
        echo "üìã Checking AndroidManifest.xml..."
        cat app/src/main/AndroidManifest.xml
        
        echo "üî® Starting Gradle build with detailed logging..."
        ./gradlew assembleDebug --no-daemon --stacktrace --info --debug || {
          echo "‚ùå Build failed, showing recent build logs:"
          find . -name "*.log" -exec tail -50 {} \; 2>/dev/null || true
          echo "üìÇ Checking build directory structure:"
          find app/build -type f -name "*.log" 2>/dev/null | head -10 | xargs tail -20 2>/dev/null || true
          exit 1
        }
        
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "‚úÖ Debug APK built successfully"
          ls -la app/build/outputs/apk/debug/
        else
          echo "‚ùå Debug APK not found"
          find app/build -name "*.apk" 2>/dev/null || echo "No APK files found"
          exit 1
        fi
        
    # ... rest of the upload and release steps remain the same